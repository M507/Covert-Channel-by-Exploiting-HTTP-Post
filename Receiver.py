#!/bin/python3
import pyshark
from scapy.layers.inet import *
from scapy.all import *


#def sinffer(eth0, senderip):
def sinffer_analyze(eth0):
    #Live capture
    ####################################
    #capture = pyshark.LiveCapture(interface=eth0, output_file="capture.pcap", bpf_filter='tcp port 80')
    #capture2 = pyshark.LiveCapture(interface=eth0, output_file="https", bpf_filter='tcp port 443')
    #capture.sniff(timeout=50)
    
    #reading file
    ####################################
    capture = pyshark.FileCapture('/Users/t3/Desktop/githubRepo/Covert-Channel-by-Exploiting-HTTP-Post/wireshark', display_filter='http')


    length = len(capture)
    print(length)
    ISNs = []
    for packet in capture:
        #ip = packet['ip'].dst
        #if ip == senderip:
            hasSYN = packet.tcp.flags_syn #looking for SYN packets
            if hasSYN != 0:
            #we have ISN
                #print("we got SYN")
                isn = ISNs.append(packet.tcp.seq)
#       else:
#           continue

    print(ISNs)
    return ISNs
        

def reader(ISNs):
    msgs = ""
    for msg in ISNs:
        msgs = msgs + chr(int(msg))
    return msgs

def sendcraftedHttpPacket(payload,seqI):
    seq = 12345
    sport = 1040
    dport = 80

    ip_packet = IP(dst='129.21.41.27')
    syn_packet = TCP(sport=sport, dport=dport, flags='S', seq=seq)

    packet = ip_packet / syn_packet
    synack_response = sr1(packet)

    next_seq = seq + 1
    my_ack = synack_response.seq + 1

    ack_packet = TCP(sport=sport, dport=dport, flags='A', seq=next_seq, ack=my_ack)

    send(ip_packet / ack_packet)

    print("sent 1")
    payload_packet = TCP(sport=sport, dport=dport, flags='A', seq=seqI, ack=my_ack)

    reply, error = sr1(ip_packet / payload_packet / payload, multi=1)
    for r in reply:
        r[0].show2()
        r[1].show2()
        print("sent 2")


def main():
    #sinffer("en0", "10.0.0.1")
    msg = sinffer_analyze("en0")
    transltedMSG = reader(msg)
    print(transltedMSG)

    #sendcraftedHttpPacket("The payload", "6565")
    #reader()




if __name__ == "__main__": 
    main()